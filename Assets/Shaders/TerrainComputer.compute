#pragma kernel TerrainComputer
#pragma kernel TilemapComputer

float2 terrainPosition, terrainSize, locationPosition, locationSize, worldSize;
int heightmapResolution, locationCount;
float4 locationPositions[1089], locationSizes[1089];
RWStructuredBuffer<float> heightmapBuffer;
RWStructuredBuffer<float> rawNoise;
RWStructuredBuffer<int> tilemapData;
RWStructuredBuffer<float3> locationHeightData;
float avg, originalHeight, newHeight;
StructuredBuffer<int> lookupTable;
StructuredBuffer<int> prototypes;
Texture2D<float4> mapPixelHeights;

Texture2D<float> tileableNoise;

Texture2D<float4> BiomeMap;
SamplerState bm_linear_clamp_sampler;
SamplerState bm_point_clamp_sampler;

Texture2D<float4> DerivMap;
SamplerState dm_linear_clamp_sampler;

#include "noises.cginc"
#include "noiseParams.cginc"
#include "heightSampling.cginc"
#include "basicRoads.cginc"

void GetLocationEdgeData(int2 id, out int2 nearestEdge, out int maxDist) {
    int r = heightmapResolution;

    int2 _min = locationPosition;
    int2 _max = _min + locationSize;

    bool withinY = id.y > _min.y && id.y < _max.y;
    bool withinX = id.x > _min.x && id.x < _max.x;

    if (withinY) {
        int2 e1 = int2(_min.x, id.y);
        int2 e2 = int2(_max.x, id.y);
        int d1 = _min.x;
        int d2 = r - _max.x;

        if (distance(id, e1) < distance(id, e2)) {
            nearestEdge = e1;
            maxDist = d1;
        }
        else {
            nearestEdge = e2;
            maxDist = d2;
        }

        return;
    }

    if (withinX) {
        int2 e1 = int2(id.x, _min.y);
        int2 e2 = int2(id.x, _max.y);
        int d1 = _min.y;
        int d2 = r - _max.y;

        if (distance(id, e1) < distance(id, e2)) {
            nearestEdge = e1;
            maxDist = d1;
        }
        else {
            nearestEdge = e2;
            maxDist = d2;
        }

        return;
    }

    int2 c1 = int2(_min.x, _min.y);
    int2 c2 = int2(_max.x, _min.y);
    int2 c3 = int2(_min.x, _max.y);
    int2 c4 = int2(_max.x, _max.y);
    int d1 = min(c1.x, c1.y);
    int d2 = min(r - c2.x, c2.y);
    int d3 = min(c3.x, r - c3.y);
    int d4 = min(r - c4.x, r - c4.y);

    float dist1 = distance(id, c1);
    float dist2 = distance(id, c2);
    float dist3 = distance(id, c3);
    float dist4 = distance(id, c4);

    if (dist1 < dist2 && dist1 < dist3 && dist1 < dist4) {
        nearestEdge = c1;
        maxDist = d1;

        return;
    }

    if (dist2 < dist3 && dist2 < dist4) {
        nearestEdge = c2;
        maxDist = d2;

        return;
    }

    if (dist3 < dist4) {
        nearestEdge = c3;
        maxDist = d3;

        return;
    }

    nearestEdge = c4;
    maxDist = d4;
}

float GetLocationWeight(int2 id, float noise) {
    if (locationPosition.x < 0 || locationPosition.y < 0) {
        return 0.0;
    }

    int2 min = locationPosition;
    int2 max = min + locationSize;

    if (id.x > min.x&& id.x < max.x && id.y > min.y&& id.y < max.y) {
        return 1.0;
    }

    int2 nearestEdge;
    int maxDist;

    GetLocationEdgeData(id, nearestEdge, maxDist);

    maxDist = lerp(maxDist * 0.25, maxDist, clamp(noise, 0, 1));

    return pow(clamp(1.0 - (distance(id, nearestEdge) / (maxDist - 1)), 0, 1), 2);
}

float2 NearestEdgePoint(float2 pos, float2 locPos, float2 locSize) {
    float2 min = locPos;
    float2 max = locPos + locSize;

    bool insideY = pos.y > min.y && pos.y < max.y;
    bool insideX = pos.x > min.x && pos.x < max.x;

    if (insideX && insideY) {
        return pos;
    }

    if (insideY) {
        float2 left = float2(min.x, pos.y);
        float2 right = float2(max.x, pos.y);

        return distance(pos, left) < distance(pos, right)
            ? left
            : right;
    }

    if (insideX) {
        float2 bottom = float2(pos.x, min.y);
        float2 top = float2(pos.x, max.y);

        return distance(pos, bottom) < distance(pos, top)
            ? bottom
            : top;
    }

    float2 c1 = float2(min.x, min.y);
    float2 c2 = float2(max.x, min.y);
    float2 c3 = float2(min.x, max.y);
    float2 c4 = float2(max.x, max.y);

    float d1 = distance(pos, c1);
    float d2 = distance(pos, c2);
    float d3 = distance(pos, c3);
    float d4 = distance(pos, c4);

    if (d1 < d2 && d1 < d3 && d1 < d4) {
        return c1;
    }

    if (d2 < d3 && d2 < d4) {
        return c2;
    }

    if (d3 < d4) {
        return c3;
    }

    return c4;
}

float2 NearestRadialEdgePoint(float2 pos, float2 locPos, float2 locSize, out float2 nearestEdgeNarrow) {
    float2 locCenter = locPos + locSize * 0.5;
    float dist = distance(locCenter, pos);
    float edgeDist = distance(locCenter, locPos);
    float2 dir = normalize(pos - locCenter);

    float2 nep = NearestEdgePoint(pos, locPos, locSize);
    nearestEdgeNarrow = nep;
    PerlinParams noiseParams = PerlinDune(nep + 500.0);
    noiseParams.octaves = 8;
    noiseParams.frequency = 0.015;
    noiseParams.persistence = 0.7;
    noiseParams.maxHeight = newHeight;
    float noise = pow(saturate(PositivePerlin(noiseParams)), 2);

    edgeDist += 7.5 * noise;

    if (dist < edgeDist) {
        return pos;
    }

    return locCenter + dir * edgeDist;
}

float GetMapPixelLinearHeight(float2 pos) {
    //pos.y -= terrainSize.y; 
    //pos -= terrainSize;
    /*pos.y += terrainSize.y;
    pos.x -= terrainSize.x;*/
    pos.y += terrainSize.y;
    float2 mpPos = floor(pos / terrainSize);
    //float2 roundedPos = mpPos * terrainSize;

    float fx = (pos.x / terrainSize.x) - mpPos.x;
    float fy = (pos.y / terrainSize.y) - mpPos.y;

    int2 x0y0 = int2(mpPos);
    int2 x1y0 = x0y0 + int2(1, 0);
    int2 x0y1 = x0y0 + int2(0, -1);
    int2 x1y1 = x0y0 + int2(1, -1);

    float h1 = lerp(mapPixelHeights[x0y0].r, mapPixelHeights[x1y0].r, fx);
    float h2 = lerp(mapPixelHeights[x0y1].r, mapPixelHeights[x1y1].r, fx);

    return lerp(h1, h2, fy);
}

float2 ClampToLine(float2 p1, float2 p2, float2 pos) {
    // Get heading
    float2 heading = p2 - p1;
    float magnitudeMax = sqrt(heading.x * heading.x + heading.y * heading.y);
    heading = normalize(heading);

    // Do projection from pos, but clamp it
    float2 lhs = pos - p1;
    float dotP = dot(lhs, heading);
    dotP = clamp(dotP, 0.0, magnitudeMax);

    return p1 + heading * dotP;
}

#define F_MAX 99999999.9
float LocationWeight(float2 pos, out float basemapHeight, out float wildernessWeight) {
    float weight = 0.0;
    float narrowWeight = 0.0;
    float height = 0.0;
    float nearestHeight = 0.0;
    float nearestDist = F_MAX;

    float2 uvOffset = float2(-1.5, 0.5) / float2(TERRAIN_X, TERRAIN_Y);

    float2 fallbackUv = saturate(pos / (terrainSize * float2(TERRAIN_X, TERRAIN_Y))) + uvOffset;
    float fallbackHeight = mapPixelHeights.SampleLevel(dm_linear_clamp_sampler, fallbackUv, 0);

    for (int i = 0; i < locationCount; i++) {
        float2 locPos = floor(locationPositions[i].xy);
        float2 locSize = floor(locationSizes[i].xy);
        float2 locEnd = locPos + locSize;
        float2 locCenter = locPos + locSize * 0.5;

        float2 uv = saturate(locCenter / (terrainSize * float2(TERRAIN_X, TERRAIN_Y))) + uvOffset;
        float baseHeight = mapPixelHeights.SampleLevel(dm_linear_clamp_sampler, uv, 0).r;

        float fadeDist = 32.0 * 2.0;

        float2 nearestEdgeNarrow;
        float2 nearestEdge = NearestRadialEdgePoint(pos, locPos, locSize, nearestEdgeNarrow);

        PerlinParams noiseParams = PerlinDune(nearestEdgeNarrow);
        noiseParams.amplitude = 1.0;
        noiseParams.octaves = 8;
        noiseParams.frequency = 0.05;
        noiseParams.lacunarity = 2.0;
        noiseParams.persistence = 0.73;
        noiseParams.maxHeight = newHeight;
        float noise = saturate(PositivePerlin(noiseParams));

        float maxNarrowDist = lerp(5.0, 15.0, noise);
        float narrowDist = distance(pos, nearestEdgeNarrow);
        narrowWeight += 1.0 - saturate(narrowDist / maxNarrowDist);

        locationHeightData[i] = float3(nearestEdge, baseHeight);

        float2 edgeDir = normalize(nearestEdge - locCenter);
        float2 samplePt = nearestEdge + edgeDir * 5.0;

        noiseParams = PerlinDune(samplePt);
        noiseParams.octaves = 16;
        noiseParams.frequency = 0.007;
        noiseParams.persistence = 0.73;
        noiseParams.maxHeight = newHeight;
        noise = pow(saturate(PositivePerlin(noiseParams)), 2);

        fadeDist += fadeDist * 8.0 * noise;
        float edgeDist = distance(nearestEdge, pos);

        float w = 1.0 - saturate(edgeDist / fadeDist);
        w = pow(w, 2.0);
        w = smoothstep(0, 1, w);

        weight += w;

        if (edgeDist < nearestDist) {
            nearestHeight = baseHeight;
            nearestDist = edgeDist;
        }

        height += baseHeight * w;
    }

    wildernessWeight = 1.0 - saturate(narrowWeight);

    basemapHeight = max(105.0 / newHeight, height / weight);
    weight = saturate(weight);
    basemapHeight = lerp(basemapHeight, nearestHeight, saturate(narrowWeight));
    basemapHeight = saturate(basemapHeight);
    basemapHeight = lerp(fallbackHeight, basemapHeight, weight);

    return weight;
}

float GetHeightSample(float2 id, out float mountainPart) {
    float heightmapMaxIndex = heightmapResolution - 1;
    float2 tileUv = float2(id.xy) / heightmapMaxIndex;
    int i = id.x + id.y * heightmapResolution;

    float2 tp = terrainPosition;

    float2 pos = tp + tileUv * heightmapResolution;

    float locationHeight, bumpWeight;
    float locationWeight = LocationWeight(pos, locationHeight, bumpWeight);
    float wildernessWeight = bumpWeight;
    bumpWeight *= pow(locationWeight, 0.25);

    float roadWeight = GetRoadWeight(pos);
    locationWeight = max(locationWeight, roadWeight);

    float extraHeight, bumps;
    float baseHeight = GetBaseHeight(id.xy, extraHeight, bumps);
    bumps *= bumpWeight;

    PerlinParams p;
    p.pos = pos;
    p.octaves = 16;
    p.frequency = 0.01;
    p.amplitude = 1.0;
    p.lacunarity = 1.6;
    p.persistence = 0.6;
    p.offset = 0;
    p.maxHeight = newHeight;
    float transition = abs(SimplePerlin(p));

    float transitionWeight = pow(locationWeight, 0.5) * wildernessWeight;
    locationWeight = saturate(locationWeight - 0.5) / 0.5;

    baseHeight = lerp(baseHeight, locationHeight, locationWeight);
    float landWeight = saturate(((baseHeight - 100.0) / newHeight) / 5.0);
    transitionWeight *= landWeight;

    float transitionHeight = min(abs(baseHeight - locationHeight), 250.0 / newHeight);
    baseHeight += transition * transitionHeight * transitionWeight * 0.5;

    mountainPart = extraHeight + bumps;
    extraHeight *= (1.0 - locationWeight);

    baseHeight += extraHeight + bumps;

    return baseHeight;
}

void HeightmapComputation(int3 id, int i) {
    int rnIndex = id.x + id.y * (heightmapResolution + 1);

    float2 tileUv = float2(id.xy) / (heightmapResolution - 1);

    float2 tp = terrainPosition;

    float2 worldPos = tp + tileUv * terrainSize;
    float2 worldUv = worldPos / (terrainSize * float2(TERRAIN_X, TERRAIN_Y));

    float mountainPart;
    float newVal = GetHeightSample(id.xy, mountainPart);

    float minHeight = BASEHEIGHT_MIN / newHeight;
    float height = max(minHeight, newVal);

    rawNoise[rnIndex] = height;

    if (id.x < heightmapResolution && id.y < heightmapResolution) {
        heightmapBuffer[i] = height;
    }
}

[numthreads(10,10,1)]
void TerrainComputer (uint3 uid : SV_DispatchThreadID)
{
    int3 id = int3(uid);

    int i = id.y + id.x * heightmapResolution;

    HeightmapComputation(id, i);
}

#define WATER 0
#define DIRT 1
#define GRASS 2
#define STONE 3
int TilemapSample(int2 id, float noise) {
    if (pow(noise, 2) < 0.9) {
        return GRASS;
    }

    return DIRT;
}

[numthreads(10, 10, 1)]
void TilemapComputer(uint3 uid : SV_DispatchThreadID)
{
    int3 id = int3(uid);

    // Prevent tilemapping outside the buffer bounds
    if (id.x >= heightmapResolution) {
        return;
    }
    if (id.y >= heightmapResolution) {
        return;
    }

    // Establish indices, UV's and position
    int tilemapIdx = id.x + id.y * heightmapResolution;
    int heightmapIdx = id.y + id.x * heightmapResolution;

    float2 tileUv = float2(id.xy) / (heightmapResolution - 1);

    float2 tp = terrainPosition;

    float2 worldPos = tp + tileUv.xy * terrainSize;
    worldPos = floor(worldPos);

    float2 worldUv = worldPos / (terrainSize * float2(TERRAIN_X, TERRAIN_Y));

    // Generate mountain and hill base noise
    PerlinParams hillBaseParams = HillBase(worldPos);
    float hillBase = SimplePerlin(hillBaseParams);
    hillBase = saturate(hillBase * 0.5 + 0.5);
    hillBase = pow(hillBase, 3);

    SwissParams mountainBaseParams = MountainBase(worldPos);
    float mountainBase = MountainBaseNoise(mountainBaseParams);

    // Get biome weights and recalculate/merge with mountain base
    BiomeWeights w = GetBiomeWeights(worldUv, id.xy, false);
    float oldVal = heightmapBuffer[heightmapIdx];

    w.land = saturate((oldVal - (100.0 / newHeight)) / (40.0 / newHeight));
    w.mountain = max(w.mountain, mountainBase * 0.25);

    // Get 4 surrounding mountain noise samples for steepness calculation
    float minSmpl = 2;
    float maxSmpl = -1;

    for (int x = 0; x <= 1; x++) {
        for (int y = 0; y <= 1; y++) {
            int rnIndex = (id.x + x) + (id.y + y) * (heightmapResolution + 1);
            float smpl = rawNoise[rnIndex];

            if (smpl < minSmpl) {
                minSmpl = smpl;
            }
            if (smpl > maxSmpl) {
                maxSmpl = smpl;
            }
        }
    }

    minSmpl = minSmpl * newHeight;
    maxSmpl = maxSmpl * newHeight;

    // Gradient noise for beach variation and base tilemap sampling
    PerlinParams perlinTile = PerlinBump(worldPos);
    perlinTile.maxHeight = 5000;
    perlinTile.amplitude = 0.6;
    perlinTile.octaves = 12;
    perlinTile.persistence = 0.9;
    perlinTile.lacunarity = 2.0;
    perlinTile.frequency *= 0.005;
    perlinTile.amplitude *= 1.3;
    float noise = clamp(SimplePerlin(perlinTile), -1, 1) * 0.5 + 0.5;

    // Step 1: base tilemap sampling (basic variance between grass and dirt)
    tilemapData[tilemapIdx] = TilemapSample(id.xy, noise);

    // Step 2: determine if ocean/lake
    if (w.land < 0.01) {
        tilemapData[tilemapIdx] = WATER;
        return;
    }
    // Step 3: determine if beach (dirt)
    else if (w.land < lerp(0.05, 0.125, noise)) {
        tilemapData[tilemapIdx] = DIRT;
        return;
    }

    // Reassign from gradient noise to value noise for stone transition
    noise = random(worldUv);

    float diff = maxSmpl - minSmpl;

    float stoneThres = lerp(6.5, 7.0, noise);
    float grassThres = stoneThres - 1;

    // Step 4: determine if steepness is high enough to warrant a stone tile
    if (diff > stoneThres) {
        tilemapData[tilemapIdx] = STONE;
    }
    // Step 5: ensure that tiles next to stone tiles are grass tiles (dirt doesn't blend with stone)
    else if (diff > grassThres) {
        tilemapData[tilemapIdx] = GRASS;
    }
}

